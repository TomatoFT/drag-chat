ðŸ“Œ 1. Health Check
Endpoint: GET /health
Description: Check if the backend is running

Response:
{
  "status": "ok"
}
ðŸ“Œ 2. Upload Document
Endpoint: POST /documents/upload
Description: Upload a document (PDF, DOCX, or TXT), parse it, chunk the content, and store in MongoDB.

Request (Form Data):

file: File upload (PDF, DOCX, TXT)

Response:
{
  "document_id": "abc123",
  "filename": "example.pdf",
  "chunk_count": 20,
  "message": "Document uploaded and processed successfully"
}
ðŸ“Œ 3. Create Chat
Endpoint: POST /chats
Description: Create a new chat session associated with a specific document.

Request:
{
  "name": "Research Summary Chat",
  "document_id": "abc123"
}
Response:

{
  "chat_id": "chat456",
  "name": "Research Summary Chat",
  "document_id": "abc123",
  "created_at": "2025-04-13T12:00:00Z"
}
ðŸ“Œ 4. List All Chats
Endpoint: GET /chats
Description: Get all chat sessions (optionally scoped by user in the future).

Response:
[
  {
    "chat_id": "chat456",
    "name": "Research Summary Chat",
    "document_id": "abc123",
    "created_at": "2025-04-13T12:00:00Z"
  },
  {
    "chat_id": "chat789",
    "name": "History Notes",
    "document_id": "def456",
    "created_at": "2025-04-10T15:20:00Z"
  }
]
ðŸ“Œ 5. Rename Chat
Endpoint: PUT /chats/{chat_id}
Description: Update a chat's name

Request:
{
  "name": "Updated Chat Name"
}
Response:
{
  "chat_id": "chat456",
  "name": "Updated Chat Name"
}
ðŸ“Œ 6. Delete Chat
Endpoint: DELETE /chats/{chat_id}
Description: Delete a chat and all associated messages

Response:
{
  "message": "Chat deleted successfully"
}
ðŸ“Œ 7. Get Chat Details
Endpoint: GET /chats/{chat_id}
Description: Retrieve chat metadata and full Q&A message history

Response:
{
  "chat_id": "chat456",
  "name": "Research Summary Chat",
  "document_id": "abc123",
  "created_at": "2025-04-13T12:00:00Z",
  "messages": [
    {
      "question": "What is this document about?",
      "answer": "The document discusses...",
      "timestamp": "2025-04-13T12:05:00Z"
    },
    {
      "question": "Who is the author?",
      "answer": "It was written by...",
      "timestamp": "2025-04-13T12:06:30Z"
    }
  ]
}
ðŸ“Œ 8. Ask a Question
Endpoint: POST /qa/ask
Description: Ask a question in a chat; retrieve document context and generate a response using LLM.

Request:

{
  "chat_id": "chat456",
  "question": "What are the main topics?"
}
Response:

{
  "answer": "The main topics are neural networks and transformers.",
  "sources": [
    "chunk: Introduction to neural networks...",
    "chunk: The transformer model was proposed by..."
  ],
  "chat_id": "chat456",
  "question": "What are the main topics?",
  "timestamp": "2025-04-13T12:07:45Z"
}
